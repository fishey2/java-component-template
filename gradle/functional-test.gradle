sourceSets {
    functionalTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/functional-test/java')
        }
        resources.srcDir file('src/functional-test/resources')
    }
}

configurations {
    functionalTestImplementation.extendsFrom testImplementation
    functionalTestRuntime.extendsFrom testRuntime
}

idea {
    module {
        testSourceDirs += sourceSets.functionalTest.java.srcDirs
        testResourceDirs += sourceSets.functionalTest.resources.srcDirs
        scopes.TEST.plus += [ configurations.functionalTestCompile ]
    }
}

task functionalTest(type: Test) {
    group = "verification"
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

functionalTest {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }
}

check.dependsOn functionalTest